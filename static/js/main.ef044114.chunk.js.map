{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["App","state","h1","buttons","clickOne","num","console","log","sum","setState","clear","evaluate","result","eval","error","className","this","map","onClick","id","name","Component","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k6CAIMA,I,+sBACJC,MAAQ,CACNC,GAAI,GACJC,QAAS,CACP,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,M,MAIJC,SAAW,SAAAC,GACTC,QAAQC,IAAI,gBACZ,IAAIC,EAAM,MAAKP,MAAMC,GACrBM,GAAOH,EAEP,MAAKI,SAAS,CAAEP,GAAIM,K,MAGtBE,MAAQ,WACNJ,QAAQC,IAAI,WACZ,MAAKE,SAAS,CAAEP,GAAI,M,MAGtBS,SAAW,WACT,IACE,IAAIC,OAASC,KAAK,MAAKZ,MAAMC,IAC7B,MAAKO,SAAS,CAAEP,GAAIU,SACpB,MAAOE,OACPR,QAAQC,IAAIO,S,0VASN,IAAD,OACP,OACE,kEAAKC,UAAU,WACb,kEAAKA,UAAU,QACb,kEAAKA,UAAU,WAAWC,KAAKf,MAAMC,IACrC,kEAAKa,UAAU,mBACZC,KAAKf,MAAME,QAAQc,KAAI,SAAAZ,GACtB,OACE,qEACEU,UAAU,SACVG,QAAS,kBAAM,EAAKd,SAAL,UAAiBC,MAE/BA,MAKP,qEACEU,UAAU,SACVI,GAAG,WACHC,KAAK,IACLF,QAASF,KAAKN,OAJhB,MAQA,qEACEK,UAAU,SACVI,GAAG,SACHC,KAAK,IACLF,QAASF,KAAKL,UAJhB,Y,KA1EMU,8CAyFHrB,2B,4EC7FfsB,EAAOC,QAAU,IAA0B,kC,yGCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC9B,EAAA,EAAD,MAAS+B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef044114.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    h1: \"\",\n    buttons: [\n      \"+\",\n      \"-\",\n      \"*\",\n      \"/\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \".\",\n      \"0\"\n    ]\n  };\n\n  clickOne = num => {\n    console.log(\"Do you work?\");\n    let sum = this.state.h1;\n    sum += num;\n\n    this.setState({ h1: sum });\n  };\n\n  clear = () => {\n    console.log(\"cleared\");\n    this.setState({ h1: \"\" });\n  };\n\n  evaluate = () => {\n    try {\n      let result = eval(this.state.h1);\n      this.setState({ h1: result });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // mainHandler = button => {\n  //   if (button == \"clear\") {\n  //     console.log(\"delete\");\n  //   }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"calc\">\n          <div className=\"display\">{this.state.h1}</div>\n          <div className=\"buttonContainer\">\n            {this.state.buttons.map(num => {\n              return (\n                <button\n                  className=\"button\"\n                  onClick={() => this.clickOne(`${num}`)}\n                >\n                  {num}\n                </button>\n              );\n            })}\n\n            <button\n              className=\"button\"\n              id=\"clButton\"\n              name=\"1\"\n              onClick={this.clear}\n            >\n              AC\n            </button>\n            <button\n              className=\"button\"\n              id=\"equals\"\n              name=\"1\"\n              onClick={this.evaluate}\n            >\n              =\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"1\")}>1</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"2\")}>2</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"3\")}>3</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"-\")}>-</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"4\")}>4</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"5\")}>5</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"6\")}>6</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"+\")}>+</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"7\")}>7</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"8\")}>8</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"9\")}>9</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"*\")}>*</button>\n\n      <button className=\"button\" id=\"clButton\" name=\"1\" onClick={this.clear}>AC</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"0\")}>0</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\".\")}>.</button>\n      <button className=\"button\" name=\"1\" onClick={() => this.clickOne(\"/\")}>/</button>\n      <button className=\"button\" id=\"equals\" name=\"1\" onClick={this.evaluate}>=</button>\n      </div>\n      </div>\n      </div> */\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}